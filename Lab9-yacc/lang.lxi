
%{ 	 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "lang.tab.h"
int currentLine = 1;
%} 

%option noyywrap

IDENTIFIER		[a-zA-Z_]([a-zA-Z0-9_]*)
NUMBER_CONST	0|[+|-][1-9]([0-9])*|[1-9]([0-9])*
STRING_CONST	[\"][a-zA-Z0-9_?!#*,./%-+=<>;(){} ]*[\"]


%%

"if"            {printf("Reserved word: %s\n", yytext); return IF;}
"@"             {printf("Reserved word: %s\n", yytext); return AT;}
"else"          {printf("Reserved word: %s\n", yytext); return ELSE;}
"read"          {printf("Reserved word: %s\n", yytext); return READ;}
"write"         {printf("Reserved word: %s\n", yytext); return WRITE;}
"integer"       {printf("Reserved word: %s\n", yytext); return INTEGER;}
"string"        {printf("Reserved word: %s\n", yytext); return STRING;}
"for"           {printf("Reserved word: %s\n", yytext); return FOR;}
"in"            {printf("Reserved word: %s\n", yytext); return IN;}
"range"         {printf("Reserved word: %s\n", yytext); return RANGE;}
"while"         {printf("Reserved word: %s\n", yytext); return WHILE;}

"+"             {printf("Operator %s\n", yytext); return plus;}
"-"             {printf("Operator %s\n", yytext); return  minus;}
"*"             {printf("Operator %s\n", yytext); return mul;}
"/"             {printf("Operator %s\n", yytext); return division;}
"%"             {printf("Operator %s\n", yytext); return mod;}
"<="            {printf("Operator %s\n", yytext); return lessOrEqual;}
">="            {printf("Operator %s\n", yytext); return moreOrEqual;}
"<"             {printf("Operator %s\n", yytext); return  less;}
">"             {printf("Operator %s\n", yytext); return more;}
"=="            {printf("Operator %s\n", yytext); return equal;}
"!="            {printf("Operator %s\n", yytext); return different;}
"="             {printf("Operator %s\n", yytext); return eq;}
"and"           {printf("Operator %s\n", yytext); return and;}
"or"            {printf("Operator %s\n", yytext); return or;}

"{"             {printf("Separator %s\n", yytext); return leftCurlyBracket;}
"}"             {printf("Separator %s\n", yytext); return rightCurlyBracket;}
"("             {printf("Separator %s\n", yytext); return leftRoundBracket;}
")"             {printf("Separator %s\n", yytext); return rightRoundBracket;}
"["             {printf("Separator %s\n", yytext); return leftBracket;}
"]"             {printf("Separator %s\n", yytext); return rightBracket;}
":"             {printf("Separator %s\n", yytext); return colon;}
";"             {printf("Separator %s\n", yytext); return semicolon;}
","             {printf("Separator %s\n", yytext); return comma;}
"'"             {printf("Separator %s\n", yytext); return apostrophe;}
"\""            {printf("Separator %s\n", yytext); return quote;}
" "             {printf("Separator %s\n", yytext); return space;}
"."             {printf("Separator %s\n", yytext); return dot;}

{IDENTIFIER}    {printf("Identifier: %s\n", yytext); return IDENTIFIER;}
{NUMBER_CONST}  {printf("Number: %s\n", yytext); return NUMBER_CONST;}
{STRING_CONST}  {printf("String: %s\n", yytext); return STRING_CONST;}

[ \t]+          {}
[\n]+           {currentLine++;}

[0-9][a-zA-Z0-9_]*		{printf("\nINVALID IDENTIFIER at line %d, %s\n", currentLine,yytext);}
[+|-]0		{printf("\nINVALID NUMBER CONSTANT at line %d\n", currentLine);}

%%
